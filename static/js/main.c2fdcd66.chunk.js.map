{"version":3,"sources":["components/Forecast/Forecast.module.css","components/Conditions/Conditions.module.css","components/Conditions/Conditions.js","components/Forecast/Forecast.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","conditions","props","className","classes","Wrapper","error","Small","loading","Loader","responseObj","cod","name","Math","round","main","temp","weather","description","Forecast","useState","city","setCity","unit","setUnit","setResponseObj","setError","setLoading","uriEncodedCity","encodeURIComponent","onSubmit","e","preventDefault","length","fetch","method","headers","process","then","response","json","console","log","Error","catch","err","message","type","placeholder","maxLength","textInput","value","onChange","target","Radio","checked","Button","Conditions","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,UAAY,4BAA4B,MAAQ,wBAAwB,OAAS,2B,gBCAnGD,EAAOC,QAAU,CAAC,QAAU,4BAA4B,MAAQ,0BAA0B,OAAS,2BAA2B,KAAO,2B,wLCyBtHC,EAvBI,SAACC,GAClB,OACE,yBAAKC,UAAWC,IAAQC,SACrBH,EAAMI,OACL,2BAAOH,UAAWC,IAAQG,OAA1B,8BAEDL,EAAMM,SAAW,yBAAKL,UAAWC,IAAQK,QAAxB,cAES,MAA1BP,EAAMQ,YAAYC,IACjB,6BACE,2BACE,gCAAST,EAAMQ,YAAYE,OAE7B,8CACmBC,KAAKC,MAAMZ,EAAMQ,YAAYK,KAAKC,MADrD,qBAEYd,EAAMQ,YAAYO,QAAQ,GAAGC,YAFzC,MAKA,O,gBC6EKC,EA9FE,WAAO,IAAD,EACCC,mBAAS,IADV,mBAChBC,EADgB,KACVC,EADU,OAECF,mBAAS,YAFV,mBAEhBG,EAFgB,KAEVC,EAFU,OAGeJ,mBAAS,IAHxB,mBAGhBV,EAHgB,KAGHe,EAHG,OAIGL,oBAAS,GAJZ,mBAIhBd,EAJgB,KAIToB,EAJS,OAKON,oBAAS,GALhB,mBAKhBZ,EALgB,KAKPmB,EALO,KAOfC,EAAiBC,mBAAmBR,GA2C1C,OACE,6BACE,+DAEA,0BAAMS,SA7CV,SAAqBC,GAGnB,GAFAA,EAAEC,iBAEkB,IAAhBX,EAAKY,OACP,OAAOP,GAAS,GAIlBA,GAAS,GACTD,EAAe,IAEfE,GAAW,GAEXO,MAAK,0EAEgEX,EAFhE,cAE0EK,GAE7E,CACEO,OAAQ,MACRC,QAAS,CACP,kBAAmB,4CACnB,iBAAkBC,wDAIrBC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GAEL,GADAE,QAAQC,IAAIH,GACS,MAAjBA,EAAS5B,IACX,MAAM,IAAIgC,MAEZlB,EAAec,GACfZ,GAAW,MAEZiB,OAAM,SAACC,GACNnB,GAAS,GACTC,GAAW,GACXc,QAAQC,IAAIG,EAAIC,cAShB,2BACEC,KAAK,OACLC,YAAY,aACZC,UAAU,KACV9C,UAAWC,IAAQ8C,UACnBC,MAAO9B,EACP+B,SAAU,SAACrB,GAAD,OAAOT,EAAQS,EAAEsB,OAAOF,UAEpC,2BAAOhD,UAAWC,IAAQkD,OACxB,2BACEP,KAAK,QACLnC,KAAK,QACL2C,QAAkB,aAAThC,EACT4B,MAAM,WACNC,SAAU,SAACrB,GAAD,OAAOP,EAAQO,EAAEsB,OAAOF,UANtC,cAUA,2BAAOhD,UAAWC,IAAQkD,OACxB,2BACEP,KAAK,QACLnC,KAAK,QACL2C,QAAkB,WAAThC,EACT4B,MAAM,SACNC,SAAU,SAACrB,GAAD,OAAOP,EAAQO,EAAEsB,OAAOF,UANtC,WAWA,4BAAQhD,UAAWC,IAAQoD,OAAQT,KAAK,UAAxC,iBAKF,kBAACU,EAAD,CAAY/C,YAAaA,EAAaJ,MAAOA,EAAOE,QAASA,MC3EpDkD,MAdf,WACE,OACE,yBAAKvD,UAAU,OACb,4BAAQA,UAAU,eAChB,mDAEF,8BACE,kBAAC,EAAD,OAEF,qDCDcwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEd7B,OAAM,SAAAtC,GACLmC,QAAQnC,MAAMA,EAAMwC,c","file":"static/js/main.c2fdcd66.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TextInput\":\"Forecast_TextInput__2ur0J\",\"Radio\":\"Forecast_Radio__1Ejlt\",\"Button\":\"Forecast_Button__3Y_IL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"Conditions_Wrapper__1WUTs\",\"Small\":\"Conditions_Small__1VrqO\",\"Loader\":\"Conditions_Loader__PcSFJ\",\"spin\":\"Conditions_spin__b05Or\"};","import React from \"react\";\nimport classes from \"./Conditions.module.css\";\n\nconst conditions = (props) => {\n  return (\n    <div className={classes.Wrapper}>\n      {props.error && (\n        <small className={classes.Small}>Please enter a valid city.</small>\n      )}\n      {props.loading && <div className={classes.Loader}>Loading...</div>}\n\n      {props.responseObj.cod === 200 ? (\n        <div>\n          <p>\n            <strong>{props.responseObj.name}</strong>\n          </p>\n          <p>\n            It is currently {Math.round(props.responseObj.main.temp)} degrees\n            out with {props.responseObj.weather[0].description}.\n          </p>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default conditions;\n","import React, { useState } from \"react\";\nimport Conditions from \"../Conditions/Conditions\";\nimport classes from \"./Forecast.module.css\";\n\nconst Forecast = () => {\n  let [city, setCity] = useState(\"\");\n  let [unit, setUnit] = useState(\"imperial\");\n  let [responseObj, setResponseObj] = useState({});\n  let [error, setError] = useState(false);\n  let [loading, setLoading] = useState(false);\n\n  const uriEncodedCity = encodeURIComponent(city);\n\n  function getForecast(e) {\n    e.preventDefault();\n\n    if (city.length === 0) {\n      return setError(true);\n    }\n\n    // Clear state in preparation for new data\n    setError(false);\n    setResponseObj({});\n\n    setLoading(true);\n\n    fetch(\n      // Current Forecast\n      `https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`,\n      // `https://community-open-weather-map.p.rapidapi.com/forecast?q=${uriEncodedCity}`,\n      {\n        method: \"GET\",\n        headers: {\n          \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n          \"x-rapidapi-key\": process.env.REACT_APP_API_KEY,\n        },\n      }\n    )\n      .then((response) => response.json())\n      .then((response) => {\n        console.log(response);\n        if (response.cod !== 200) {\n          throw new Error();\n        }\n        setResponseObj(response);\n        setLoading(false);\n      })\n      .catch((err) => {\n        setError(true);\n        setLoading(false);\n        console.log(err.message);\n      });\n  }\n\n  return (\n    <div>\n      <h2>Find Current Weather Conditions</h2>\n\n      <form onSubmit={getForecast}>\n        <input\n          type=\"text\"\n          placeholder=\"Enter City\"\n          maxLength=\"50\"\n          className={classes.textInput}\n          value={city}\n          onChange={(e) => setCity(e.target.value)}\n        />\n        <label className={classes.Radio}>\n          <input\n            type=\"radio\"\n            name=\"units\"\n            checked={unit === \"imperial\"}\n            value=\"imperial\"\n            onChange={(e) => setUnit(e.target.value)}\n          />\n          Fahrenheit\n        </label>\n        <label className={classes.Radio}>\n          <input\n            type=\"radio\"\n            name=\"units\"\n            checked={unit === \"metric\"}\n            value=\"metric\"\n            onChange={(e) => setUnit(e.target.value)}\n          />\n          Celcius\n        </label>\n\n        <button className={classes.Button} type=\"submit\">\n          Get Forecast\n        </button>\n      </form>\n\n      <Conditions responseObj={responseObj} error={error} loading={loading} />\n    </div>\n  );\n};\n\nexport default Forecast;\n","import React from \"react\";\nimport \"./App.css\";\nimport Forecast from \"./components/Forecast/Forecast\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-hdeader\">\n        <h1> React Weather App</h1>\n      </header>\n      <main>\n        <Forecast />\n      </main>\n      <footer>GitHub @TracyVy</footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}